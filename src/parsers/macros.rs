// -------------------------------------------------------------------------------------------------

#[macro_export]
macro_rules! parsec {
    ($a:lifetime, $e:expr) => { Parsec::<$a>(Box::new($e)) };
    ($e:expr) => { parsec(Box::new($e)) };
}

// -------------------------------------------------------------------------------------------------

#[macro_export]
macro_rules! lazy {
    ($e:expr) => { lazy(Box::new(|| $e)) };
}

// -------------------------------------------------------------------------------------------------

#[macro_export]
macro_rules! seq {
    (* ($($r:tt)+))          => { seq!($($r)+).optrep()       };
    (($l:expr) <~ $($r:tt)+) => { $l.then_left(seq!($($r)+))  };
    (($l:expr) ~> $($r:tt)+) => { $l.then_right(seq!($($r)+)) };
    (($l:expr) ~  $($r:tt)+) => { $l.then(seq!($($r)+))       };
    (($l:expr) >> $r:expr)   => { $l.fmap(Box::new($r))       };
    (($l:expr))              => { $l                          };

}

// -------------------------------------------------------------------------------------------------

#[macro_export]
macro_rules! cases {
    (($l:expr) |  $($r:tt)+) => { $l.or(cases!($($r)+))       };
    (($l:expr) >> $r:expr)   => { $l.fmap(Box::new($r))       };
    ($l:expr)                => { $l                          };
}

// -------------------------------------------------------------------------------------------------
